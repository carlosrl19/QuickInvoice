"use strict";

// Referencia al botón que alterna el estado del sidebar
const sidebarToggler = document.querySelector(".toggle-sidebar");

// Función para inicializar el estado del sidebar desde localStorage
function initializeSidebarState() {
    const savedState = localStorage.getItem("sidebarState");
    if (savedState === "collapsed") {
        document.querySelector(".wrapper").classList.add("sidebar_minimize");
        sidebarToggler.classList.add("toggled");
        sidebarToggler.innerHTML = '<i class="icon-arrow-right-circle"></i>';
    } else {
        document.querySelector(".wrapper").classList.remove("sidebar_minimize");
        sidebarToggler.classList.remove("toggled");
        sidebarToggler.innerHTML = '<i class="icon-menu"></i>';
    }
}

// Función para alternar el estado del sidebar y guardar el estado en localStorage
function toggleSidebar() {
    const wrapper = document.querySelector(".wrapper");
    if (wrapper.classList.contains("sidebar_minimize")) {
        wrapper.classList.remove("sidebar_minimize");
        sidebarToggler.classList.remove("toggled");
        sidebarToggler.innerHTML = '<i class="icon-menu"></i>';
        localStorage.setItem("sidebarState", "expanded");
    } else {
        wrapper.classList.add("sidebar_minimize");
        sidebarToggler.classList.add("toggled");
        sidebarToggler.innerHTML = '<i class="icon-arrow-right-circle"></i>';
        localStorage.setItem("sidebarState", "collapsed");
    }
}

// Inicializar el estado del sidebar al cargar la página
document.addEventListener("DOMContentLoaded", () => {
    initializeSidebarState();

    // Agregar evento de clic al botón para alternar el estado del sidebar
    sidebarToggler.addEventListener("click", toggleSidebar);
});

// Obtiene el contenido HTML del logo en el encabezado de la barra lateral
var logoHeaderContent = $(".sidebar .logo-header").html();

/**
 * Función para aplicar colores personalizados a la barra lateral
 */
function layoutsColors() {
    // Verifica si la barra lateral tiene un atributo data-background-color
    $(".sidebar").is("[data-background-color]") ?
        $("html").addClass("sidebar-color") :
        $("html").removeClass("sidebar-color");
}

/**
 * Función para aplicar colores o imágenes de fondo personalizados
 */
function customBackgroundColor() {
    // Itera sobre todos los elementos con data-background-color="custom"
    $('*[data-background-color="custom"]').each(function () {
        // Si el elemento tiene un atributo custom-color, aplica ese color de fondo
        if ($(this).is("[custom-color]")) {
            $(this).css("background", $(this).attr("custom-color"));
        }
        // Si tiene un atributo custom-background, aplica esa imagen de fondo
        else if ($(this).is("[custom-background]")) {
            $(this).css("background-image", "url(" + $(this).attr("custom-background") + ")");
        }
    });
}

/**
 * Función para manejar clics en leyendas de gráficos (Chart.js)
 */
function legendClickCallback(e) {
    // Maneja el evento de clic en la leyenda
    for (var s = (e = e || window.event).target || e.srcElement;
        "LI" !== s.nodeName;)
        s = s.parentElement;

    var a = s.parentElement,
        o = parseInt(a.classList[0].split("-")[0], 10),
        r = Chart.instances[o],
        l = Array.prototype.slice.call(a.children).indexOf(s);

    // Ejecuta el evento de clic en la leyenda
    r.legend.options.onClick.call(r, e, r.legend.legendItems[l]);

    // Alterna la visibilidad del conjunto de datos
    r.isDatasetVisible(l) ?
        s.classList.remove("hidden") :
        s.classList.add("hidden");
}

/**
 * Función para mostrar una vista previa de imágenes seleccionadas en un input file
 */
function readURL(e) {
    // Verifica si se ha seleccionado un archivo
    if (e.files && e.files[0]) {
        var s = new FileReader();
        s.onload = function (s) {
            // Actualiza la imagen de vista previa
            $(e).parent(".input-file-image").find(".img-upload-preview").attr("src", s.target.result);
        };
        s.readAsDataURL(e.files[0]);
    }
}

/**
 * Función para alternar la visibilidad de contraseñas en campos de entrada
 */
function showPassword(e) {
    var s = $(e).parent().find("input");
    // Alterna entre tipo texto y contraseña
    "password" === s.attr("type") ?
        s.attr("type", "text") :
        s.attr("type", "password");
}

// Actualiza el contenido del logo en el encabezado principal
$(".main-header .logo-header").html(logoHeaderContent);

// Manejo del enfoque y desenfoque en el campo de búsqueda
$(".nav-search .input-group > input")
    .focus(function (e) {
        $(this).parents().eq(2).addClass("focus");
    })
    .blur(function (e) {
        $(this).parents().eq(2).removeClass("focus");
    });

// Inicialización de tooltips y popovers con Bootstrap
$(function () {
    let e = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    [...e].map(e => new bootstrap.Tooltip(e));

    let s = document.querySelectorAll('[data-bs-toggle="popover"]');
    [...s].map(e => new bootstrap.Popover(e));

    // Llama a las funciones para aplicar colores personalizados
    layoutsColors();
    customBackgroundColor();
});

// Configuración al cargar el documento
$(document).ready(function () {
    // Botón para refrescar tarjetas (simula un estado de carga)
    $(".btn-refresh-card").on("click", function () {
        var e = $(this).parents(".card");
        if (e.length) {
            e.addClass("is-loading");
            setTimeout(function () {
                e.removeClass("is-loading");
            }, 3000); // 3 segundos
        }
    });

    var c = !1,
        d = !1,
        g = !1,
        u = !1,
        p = !1,
        h = 0,
        m = 0,
        v = 0,
        f = 0,
        b = 0,
        C = 0;

    // Toggles para diferentes elementos interactivos (barra lateral, topbar, etc.)

    // Barra lateral (sidenav)
    if (!c) {
        var k = $(".sidenav-toggler");
        k.on("click", function () {
            1 == h ?
                ($("html").removeClass("nav_open"), k.removeClass("toggled"), h = 0) :
                ($("html").addClass("nav_open"), k.addClass("toggled"), h = 1);
        });
        c = !0;
    }

    // Sidebar rápido (quick sidebar)
    if (!m) {
        var k = $(".quick-sidebar-toggler");
        k.on("click", function () {
            1 == h ?
                ($("html").removeClass("quick_sidebar_open"), $(".quick-sidebar-overlay").remove(), k.removeClass("toggled"), m = 0) :
                ($("html").addClass("quick_sidebar_open"), k.addClass("toggled"), $('<div class="quick-sidebar-overlay"></div>').insertAfter(".quick-sidebar"), m = 1);
        });

        $(".wrapper").mouseup(function (e) {
            var s = $(".quick-sidebar");
            e.target.className == s.attr("class") || s.has(e.target).length ||
                ($("html").removeClass("quick_sidebar_open"), $(".quick-sidebar-toggler").removeClass("toggled"), $(".quick-sidebar-overlay").remove(), m = 0);
        });

        $(".close-quick-sidebar").on("click", function () {
            $("html").removeClass("quick_sidebar_open");
            $(".quick-sidebar-toggler").removeClass("toggled");
            $(".quick-sidebar-overlay").remove();
            m = 0;
        });
        m = !0;
    }

    // Topbar
    if (!d) {
        var w = $(".topbar-toggler");
        w.on("click", function () {
            1 == v ?
                ($("html").removeClass("topbar_open"), w.removeClass("toggled"), v = 0) :
                ($("html").addClass("topbar_open"), w.addClass("toggled"), v = 1);
        });
        d = !0;
    }

    // Toggle sidebar
    if (!g) {
        var _ = $(".toggle-sidebar");
        $(".wrapper").hasClass("sidebar_minimize") &&
            (_.addClass("toggled"), _.html('<i class="icon-arrow-right-circle"></i>'), f = 1);

        _.on("click", function () {
            1 == f ?
                ($(".wrapper").removeClass("sidebar_minimize"), _.removeClass("toggled"), _.html('<i class="icon-menu"></i>'), f = 0) :
                ($(".wrapper").addClass("sidebar_minimize"), _.addClass("toggled"), _.html('<i class="icon-arrow-right-circle"></i>'), f = 1);
            $(window).resize();
        });
        g = !0;
        u = !0;
    }

    // Page sidebar
    if (!p) {
        var q = $(".page-sidebar-toggler");
        q.on("click", function () {
            1 == b ?
                ($("html").removeClass("pagesidebar_open"), q.removeClass("toggled"), b = 0) :
                ($("html").addClass("pagesidebar_open"), q.addClass("toggled"), b = 1);
        });

        $(".page-sidebar .back").on("click", function () {
            $("html").removeClass("pagesidebar_open");
            q.removeClass("toggled");
            b = 0;
        });
        p = !0;
    }

    // Sidenav overlay toggler
    var y = $(".sidenav-overlay-toggler");
    $(".wrapper").hasClass("is-show") &&
        (C = 1, y.addClass("toggled"), y.html('<i class="icon-options-vertical"></i>'));

    y.on("click", function () {
        1 == C ?
            ($(".wrapper").removeClass("is-show"), y.removeClass("toggled"), y.html('<i class="icon-menu"></i>'), C = 0) :
            ($(".wrapper").addClass("is-show"), y.addClass("toggled"), y.html('<i class="icon-options-vertical"></i>'), C = 1);
        $(window).resize();
    });

    g = !0;

    // Eventos adicionales
    $(".nav-item a").on("click", function () {
        $(this).parent().find(".collapse").hasClass("show") ?
            $(this).parent().removeClass("submenu") :
            $(this).parent().addClass("submenu");
    });

    $(".messages-contact .user a").on("click", function () {
        $(".tab-chat").addClass("show-chat");
    });

    $(".messages-wrapper .return").on("click", function () {
        $(".tab-chat").removeClass("show-chat");
    });

    $('[data-select="checkbox"]').change(function () {
        var e = $(this).attr("data-target");
        $(e).prop("checked", $(this).prop("checked"));
    });

    $(".form-group-default .form-control").focus(function () {
        $(this).parent().addClass("active");
    }).blur(function () {
        $(this).parent().removeClass("active");
    });
});

// Manejo de cambio entre formularios de inicio de sesión y registro
var containerSignIn = $(".container-login"),
    containerSignUp = $(".container-signup"),
    showSignIn = true,
    showSignUp = false;

function changeContainer() {
    containerSignIn.css("display", showSignIn ? "block" : "none");
    containerSignUp.css("display", showSignUp ? "block" : "none");
}

$("#show-signup").on("click", function () {
    showSignUp = true;
    showSignIn = false;
    changeContainer();
});

$("#show-signin").on("click", function () {
    showSignUp = false;
    showSignIn = true;
    changeContainer();
});

changeContainer();

// Manejo de etiquetas flotantes en formularios
$(".form-floating-label .form-control").keyup(function () {
    $(this).val() !== "" ?
        $(this).addClass("filled") :
        $(this).removeClass("filled");
});

// Evento para mostrar vista previa de imágenes
$('.input-file-image input[type="file"]').change(function () {
    readURL(this);
});

// Evento para mostrar/ocultar contraseñas
$(".show-password").on("click", function () {
    showPassword(this);
});
